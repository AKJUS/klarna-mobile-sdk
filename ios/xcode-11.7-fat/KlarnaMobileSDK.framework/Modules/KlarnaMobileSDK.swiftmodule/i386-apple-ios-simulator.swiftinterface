// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KlarnaMobileSDK
import AVFoundation
import AVKit
import Accelerate
import CommonCrypto
import CoreML
import Foundation
import JavaScriptCore
@_exported import KlarnaMobileSDK
import ObjectiveC
import SafariServices
import Swift
import UIKit
import VideoToolbox
import Vision
import WebKit
import os.log
import os
@available(*, deprecated, message: "Use KlarnaHybridEventListener instead.")
@objc public protocol KlarnaHybridSDKEventListener : AnyObject {
  @objc func klarnaHybridSDKWillShowFullscreen(inWebView webView: KlarnaMobileSDK.KlarnaWebView, completion: @escaping () -> Swift.Void)
  @objc func klarnaHybridSDKDidShowFullscreen(inWebView webView: KlarnaMobileSDK.KlarnaWebView, completion: @escaping () -> Swift.Void)
  @objc func klarnaHybridSDKWillHideFullscreen(inWebView webView: KlarnaMobileSDK.KlarnaWebView, completion: @escaping () -> Swift.Void)
  @objc func klarnaHybridSDKDidHideFullscreen(inWebView webView: KlarnaMobileSDK.KlarnaWebView, completion: @escaping () -> Swift.Void)
  @objc func klarnaHybridSDKFailed(inWebView webView: KlarnaMobileSDK.KlarnaWebView, withError error: KlarnaMobileSDK.KlarnaMobileSDKError)
}
@_inheritsConvenienceInitializers @objc open class ScanBaseViewController : UIKit.UIViewController, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc open func onScannedCard(number: Swift.String, expiryYear: Swift.String?, expiryMonth: Swift.String?, scannedImage: UIKit.UIImage?)
  @objc open func showCardNumber(_ number: Swift.String, expiry: Swift.String?)
  @objc open func onCameraPermissionDenied(showedPrompt: Swift.Bool)
  @objc open func useCurrentFrameNumber(errorCorrectedNumber: Swift.String?, currentFrameNumber: Swift.String) -> Swift.Bool
  @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @available(iOS 11.2, *)
  open func blockingMlModel(fullCardImage: CoreGraphics.CGImage, roiRectangle: CoreGraphics.CGRect)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class KlarnaMobileSDKCommon : ObjectiveC.NSObject {
  @objc public static func setLoggingLevel(_ loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel)
  @objc public static func deviceIdentifier() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class KlarnaPaymentError : KlarnaMobileSDK.KlarnaMobileSDKError {
  @objc final public let invalidFields: [Swift.String]?
  @objc final public let action: KlarnaMobileSDK.KlarnaPaymentAction
  @objc deinit
}
@available(*, deprecated, message: "Deprecated for the same class without an 's'.")
public typealias KlarnaPaymentsError = KlarnaMobileSDK.KlarnaPaymentError
extension UIFont {
  public static func loadFonts()
}
@objc public enum KlarnaLoggingLevel : Swift.Int {
  case off = 0
  case error = 1
  case verbose = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class KlarnaEvent : ObjectiveC.NSObject {
  @objc final public let bodyString: Swift.String?
  required public init(from dictionary: [Swift.String : Swift.String])
  @objc deinit
  @objc override dynamic public init()
}
public typealias KlarnaPaymentAction = Swift.String
extension String {
  public static let initialize: KlarnaMobileSDK.KlarnaPaymentAction
  public static let load: KlarnaMobileSDK.KlarnaPaymentAction
  public static let loadPaymentReview: KlarnaMobileSDK.KlarnaPaymentAction
  public static let authorize: KlarnaMobileSDK.KlarnaPaymentAction
  public static let reauthorize: KlarnaMobileSDK.KlarnaPaymentAction
  public static let finalize: KlarnaMobileSDK.KlarnaPaymentAction
}
@_hasMissingDesignatedInitializers @objc final public class KlarnaHybridSDK : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class KlarnaMobileSDKError : ObjectiveC.NSObject, Swift.Error {
  @objc final public let name: Swift.String
  @objc final public let message: Swift.String
  @objc final public let isFatal: Swift.Bool
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc extension NSObject {
}
@objc extension KlarnaHybridSDK {
  @available(*, deprecated, message: "Use the new initializer instead.")
  @objc convenience dynamic public init(webView: KlarnaMobileSDK.KlarnaWebView, returnUrl: Foundation.URL, eventListener: KlarnaMobileSDK.KlarnaHybridSDKEventListener)
  @objc convenience dynamic public init(returnUrl: Foundation.URL, eventListener: KlarnaMobileSDK.KlarnaHybridEventListener)
  @objc final public func addWebView(_ webView: KlarnaMobileSDK.KlarnaWebView)
  @objc final public func newPageLoad(in webView: KlarnaMobileSDK.KlarnaWebView)
  @available(*, deprecated, message: "Use the `newPageLoad` instead.")
  @objc final public func newPageWillLoad(in webView: KlarnaMobileSDK.KlarnaWebView)
  @objc final public func shouldFollowNavigation(withRequest request: Foundation.URLRequest) -> Swift.Bool
  @available(*, deprecated, message: "Use the method of the same name on KlarnaMobileSDK instead.")
  @objc public static func deviceIdentifier() -> Swift.String
  @available(*, deprecated, message: "SDK does not need this to be called anymore. Will be removed in future releases.")
  @objc public static func handleDeeplink(withUrl url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any])
  @objc final public func registerEventListener(withCallback callback: @escaping (KlarnaMobileSDK.KlarnaEvent) -> ())
}
@objc extension KlarnaPaymentView {
  @objc final public var category: Swift.String {
    @objc get
  }
  @objc final public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc final public var isAvalable: Swift.Bool {
    @objc get
  }
  @objc convenience dynamic public init(category: Swift.String, eventListener: KlarnaMobileSDK.KlarnaPaymentEventListener)
  @available(*, deprecated, message: "Use the new initializer instead.")
  @nonobjc convenience public init(clientToken: Swift.String, category: Swift.String, returnUrl: Foundation.URL, delegate: KlarnaMobileSDK.KlarnaPaymentViewDelegate)
  @objc final public func initialize(clientToken: Swift.String, returnUrl: Foundation.URL)
  @objc final public func load(jsonData: Swift.String? = nil)
  @objc final public func loadPaymentReview()
  @objc final public func authorize(autoFinalize: Swift.Bool = true, jsonData: Swift.String? = nil)
  @objc final public func reauthorize(jsonData: Swift.String? = nil)
  @objc final public func finalise(jsonData: Swift.String? = nil)
}
@available(*, deprecated, message: "Use KlarnaPaymentViewEventListener instead.")
public protocol KlarnaPaymentViewDelegate : AnyObject {
  func klarnaPaymentViewInitialized(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  func klarnaPaymentViewLoaded(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  func klarnaPaymentViewLoadedPaymentReview(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool?, authorizedWithToken authToken: Swift.String?, finalizeRequired: Swift.Bool?)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool?, reauthorizedWithToken authToken: Swift.String?)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool?, finalizedWithToken authToken: Swift.String?)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, resizedToHeight height: CoreGraphics.CGFloat)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, failedWithError error: KlarnaMobileSDK.KlarnaPaymentsError)
}
extension String {
  public static let KlarnaOSMErrorMissingClientId: Swift.String
  public static let KlarnaOSMErrorMissingPlacementKey: Swift.String
  public static let KlarnaOSMErrorMissingHost: Swift.String
  public static let KlarnaOSMErrorInvalidClientId: Swift.String
  public static let KlarnaOSMErrorInvalidPlacementKey: Swift.String
  public static let KlarnaOSMErrorDisabled: Swift.String
  public static let KlarnaOSMErrorNetworkError: Swift.String
}
@objc public protocol KlarnaHybridEventListener : AnyObject {
  @objc func klarnaWillShowFullscreen(inWebView webView: KlarnaMobileSDK.KlarnaWebView, completionHandler: @escaping () -> Swift.Void)
  @objc func klarnaDidShowFullscreen(inWebView webView: KlarnaMobileSDK.KlarnaWebView, completionHandler: @escaping () -> Swift.Void)
  @objc func klarnaWillHideFullscreen(inWebView webView: KlarnaMobileSDK.KlarnaWebView, completionHandler: @escaping () -> Swift.Void)
  @objc func klarnaDidHideFullscreen(inWebView webView: KlarnaMobileSDK.KlarnaWebView, completionHandler: @escaping () -> Swift.Void)
  @objc func klarnaFailed(inWebView webView: KlarnaMobileSDK.KlarnaWebView, withError error: KlarnaMobileSDK.KlarnaMobileSDKError)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KlarnaOSMView_Beta : UIKit.UIView {
  public typealias RenderResult = (KlarnaMobileSDK.KlarnaMobileSDKError?) -> ()
  public var clientId: Swift.String?
  public var placementKey: Swift.String?
  public var locale: Swift.String
  public var purchaseAmount: Swift.Int?
  weak public var hostViewController: UIKit.UIViewController?
  public func render(callback: @escaping KlarnaMobileSDK.KlarnaOSMView_Beta.RenderResult)
  @objc deinit
}
public typealias KlarnaPaymentMethodCategory = Swift.String
extension String {
  public static let PayNow: KlarnaMobileSDK.KlarnaPaymentMethodCategory
  public static let PayLater: KlarnaMobileSDK.KlarnaPaymentMethodCategory
  public static let SliceIt: KlarnaMobileSDK.KlarnaPaymentMethodCategory
}
@objc @_inheritsConvenienceInitializers final public class UIDotLoadingIndicator : UIKit.UIView {
  @objc @IBInspectable final public var dotsCount: Swift.Int {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var dotsRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var dotsSpacing: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc override final public var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  final public func startAnimating()
  final public func stopAnimating()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override final public func layoutSubviews()
  @objc deinit
}
@objc public protocol KlarnaPaymentEventListener : AnyObject {
  @objc func klarnaInitialized(paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  @objc func klarnaLoaded(paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  @objc func klarnaLoadedPaymentReview(paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  @objc func klarnaAuthorized(paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool, authToken: Swift.String?, finalizeRequired: Swift.Bool)
  @objc func klarnaReauthorized(paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool, authToken: Swift.String?)
  @objc func klarnaFinalized(paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool, authToken: Swift.String?)
  @objc func klarnaResized(paymentView: KlarnaMobileSDK.KlarnaPaymentView, to newHeight: CoreGraphics.CGFloat)
  @objc func klarnaFailed(inPaymentView paymentView: KlarnaMobileSDK.KlarnaPaymentView, withError error: KlarnaMobileSDK.KlarnaPaymentError)
}
@objc public protocol KlarnaWebView : AnyObject {
}
@objc extension WKWebView : KlarnaMobileSDK.KlarnaWebView {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class KlarnaPaymentView : UIKit.UIView {
  @objc deinit
}
extension KlarnaMobileSDK.KlarnaLoggingLevel : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaLoggingLevel : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaLoggingLevel : Swift.RawRepresentable {}
