// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name KlarnaMobileSDK
import AVKit
import AuthenticationServices
import CommonCrypto
import CryptoKit
import DeveloperToolsSupport
import Foundation
import JavaScriptCore
@_exported import KlarnaMobileSDK
import ObjectiveC
import SafariServices
import Security
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public struct KlarnaUserAccountProfile : Swift.Equatable {
  public let address: KlarnaMobileSDK.KlarnaAddress?
  public let dateOfBirth: Swift.String?
  public let email: Swift.String?
  public let emailVerified: Swift.Bool?
  public let familyName: Swift.String?
  public let givenName: Swift.String?
  public let locale: Swift.String?
  public let phone: Swift.String?
  public let nationalIdentification: KlarnaMobileSDK.KlarnaNationalIdentification?
  public init(address: KlarnaMobileSDK.KlarnaAddress?, dateOfBirth: Swift.String?, email: Swift.String?, emailVerified: Swift.Bool?, familyName: Swift.String?, givenName: Swift.String?, locale: Swift.String?, phone: Swift.String?, nationalIdentification: KlarnaMobileSDK.KlarnaNationalIdentification?)
  public static func == (a: KlarnaMobileSDK.KlarnaUserAccountProfile, b: KlarnaMobileSDK.KlarnaUserAccountProfile) -> Swift.Bool
}
extension KlarnaMobileSDK.KlarnaUserAccountProfile : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct KlarnaCustomer : Swift.Equatable {
  public let customerProfile: KlarnaMobileSDK.KlarnaCustomerProfile?
  public static func == (a: KlarnaMobileSDK.KlarnaCustomer, b: KlarnaMobileSDK.KlarnaCustomer) -> Swift.Bool
}
extension KlarnaMobileSDK.KlarnaCustomer : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(*, deprecated, renamed: "KlarnaRegion", message: "Use KlarnaRegion instead.")
public typealias KlarnaPostPurchaseRegion = KlarnaMobileSDK.KlarnaRegion
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KlarnaPostPurchaseSDK : ObjectiveC.NSObject {
  @objc deinit
}
@objc public protocol KlarnaResizableComponent {
  @objc var contentHeight: CoreFoundation.CGFloat { get }
  @objc var sizingDelegate: (any KlarnaMobileSDK.KlarnaSizingDelegate)? { get set }
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class KlarnaExpressButton : UIKit.UIControl {
  @objc @_Concurrency.MainActor(unsafe) public var buttonTheme: KlarnaMobileSDK.KlarnaButtonTheme {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var buttonShape: KlarnaMobileSDK.KlarnaButtonShape {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var buttonLabel: KlarnaMobileSDK.KlarnaButtonLabel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public init(clientId: Swift.String, locale: Swift.String, buttonTheme: KlarnaMobileSDK.KlarnaButtonTheme = .klarna, buttonShape: KlarnaMobileSDK.KlarnaButtonShape = .roundedRect, buttonLabel: KlarnaMobileSDK.KlarnaButtonLabel = .klarnaProduct, theme: KlarnaMobileSDK.KlarnaTheme = .automatic, environment: KlarnaMobileSDK.KlarnaEnvironment = .production, region: KlarnaMobileSDK.KlarnaRegion = .na, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint = .alternative1, returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@objc public class KlarnaResourceEndpoint : ObjectiveC.NSObject, Swift.RawRepresentable {
  public var rawValue: Swift.Int
  required public init?(rawValue: Swift.Int)
  @objc public static let alternative1: KlarnaMobileSDK.KlarnaResourceEndpoint
  @objc public static let alternative2: KlarnaMobileSDK.KlarnaResourceEndpoint
  public var stringValue: Swift.String {
    get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  public typealias RawValue = Swift.Int
  @objc deinit
}
public struct KlarnaSDKError : Swift.CustomStringConvertible, Swift.Error {
  public var description: Swift.String {
    get
  }
}
@available(*, deprecated, message: "Use KlarnaEventHandler instead")
@objc public protocol KlarnaEventListener {
  @objc func klarnaComponent(_ view: any KlarnaMobileSDK.KlarnaComponent, didReceiveEvent event: Swift.String, params: [Swift.String : Any])
  @objc func klarnaComponent(_ view: any KlarnaMobileSDK.KlarnaComponent, didReceiveError error: KlarnaMobileSDK.KlarnaMobileSDKError)
}
public enum KlarnaButtonStyle : Swift.String {
  case filled
  case outlined
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers open class AssetManager<T> {
  open func parseResource(sourceString: Swift.String) -> T?
  @objc deinit
}
public typealias KlarnaEventName = Swift.String
extension Swift.String {
  public static let klarnaComponentHeightChanged: Swift.String
  public static let klarnaPaymentsInitialized: Swift.String
  public static let klarnaPaymentsLoaded: Swift.String
  public static let klarnaPaymentsLoadedPaymentReview: Swift.String
  public static let klarnaPaymentsAuthorized: Swift.String
  public static let klarnaPaymentsReauthorized: Swift.String
  public static let klarnaPaymentsFinalized: Swift.String
  public static let klarnaPostPurchaseInitialized: Swift.String
  public static let klarnaPostPurchaseAuthorized: Swift.String
  public static let klarnaPostPurchaseRenderedOperation: Swift.String
  public static let klarnaWebViewWillShowFullscreen: Swift.String
  public static let klarnaWebViewDidShowFullscreen: Swift.String
  public static let klarnaWebViewWillHideFullscreen: Swift.String
  public static let klarnaWebViewDidHideFullscreen: Swift.String
  public static let klarnaButtonUserTappedButton: Swift.String
  public static let klarnaExpressButtonUserAuthenticated: Swift.String
  public static let klarnaExpressButtonUserAuthenticatedDataToken: Swift.String
  public static let klarnaSignInUserTappedButton: Swift.String
  public static let klarnaSignInAuth: Swift.String
  public static let klarnaSignInUserCancelled: Swift.String
  public static let klarnaMerchantEvent: Swift.String
}
@objc public class KlarnaEnvironment : ObjectiveC.NSObject, Swift.RawRepresentable {
  public var rawValue: Swift.Int
  required public init?(rawValue: Swift.Int)
  @objc public static let demo: KlarnaMobileSDK.KlarnaEnvironment
  @objc public static let playground: KlarnaMobileSDK.KlarnaEnvironment
  @objc public static let production: KlarnaMobileSDK.KlarnaEnvironment
  @objc public static let staging: KlarnaMobileSDK.KlarnaEnvironment
  public var stringValue: Swift.String {
    get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  public typealias RawValue = Swift.Int
  @objc deinit
}
extension KlarnaMobileSDK.KlarnaEnvironment : Swift.Codable {
}
@available(*, deprecated, renamed: "KlarnaEnvironment", message: "Use KlarnaEnvironment instead.")
public typealias KlarnaOSMEnvironment = KlarnaMobileSDK.KlarnaEnvironment
public enum KlarnaShippingCollection : Swift.String {
  case shippingAddress
  case shippingOption
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension KlarnaMobileSDK.KlarnaShippingCollection : Swift.Codable {
}
@objc public protocol KlarnaFullscreenEventListener {
  @objc func klarnaWillShowFullscreen(inWebView webView: any KlarnaMobileSDK.KlarnaWebView, completionHandler: @escaping () -> Swift.Void)
  @objc func klarnaDidShowFullscreen(inWebView webView: any KlarnaMobileSDK.KlarnaWebView, completionHandler: @escaping () -> Swift.Void)
  @objc func klarnaWillHideFullscreen(inWebView webView: any KlarnaMobileSDK.KlarnaWebView, completionHandler: @escaping () -> Swift.Void)
  @objc func klarnaDidHideFullscreen(inWebView webView: any KlarnaMobileSDK.KlarnaWebView, completionHandler: @escaping () -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@_Concurrency.MainActor(unsafe) final public class KlarnaPaymentButton : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var state: KlarnaMobileSDK.KlarnaPaymentButtonState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(klarna: KlarnaMobileSDK.Klarna, configuration: KlarnaMobileSDK.KlarnaPaymentButtonConfiguration? = nil)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override final public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override final public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override final public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KlarnaMobileSDKCommon : ObjectiveC.NSObject {
  @available(*, deprecated, message: "Set logging level at per-component level instead.")
  @objc public static func setLoggingLevel(_ loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel)
  @available(*, deprecated, message: "Do not use. May be eventually removed.")
  @objc public static func deviceIdentifier() -> Swift.String
  @objc deinit
}
@objc public enum KlarnaButtonShape : Swift.Int {
  case roundedRect
  case pill
  case rectangle
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias KlarnaSignInErrorName = Swift.String
extension Swift.String {
  public static let klarnaSignInInvalidClientID: Swift.String
  public static let klarnaSignInInvalidScope: Swift.String
  public static let klarnaSignInInvalidMarket: Swift.String
  public static let klarnaSignInInvalidPresentationContext: Swift.String
  public static let klarnaSignInAlreadyInProgress: Swift.String
  public static let klarnaSignInAuthorizationFailed: Swift.String
  public static let klarnaSignInCompletedWithoutToken: Swift.String
  public static let klarnaSignInMissingTokenizationDelegate: Swift.String
  public static let klarnaSignInTokenizationDelegateTimeout: Swift.String
}
public struct KlarnaCustomerProfile : Swift.Equatable {
  public let address: KlarnaMobileSDK.KlarnaAddress?
  public let customerId: Swift.String?
  public let dateOfBirth: Swift.String?
  public let email: Swift.String?
  public let emailVerified: Swift.Bool?
  public let familyName: Swift.String?
  public let givenName: Swift.String?
  public let locale: Swift.String?
  public let nationalIdentification: KlarnaMobileSDK.KlarnaNationalIdentification?
  public let phone: Swift.String?
  public let phoneVerified: Swift.Bool?
  public static func == (a: KlarnaMobileSDK.KlarnaCustomerProfile, b: KlarnaMobileSDK.KlarnaCustomerProfile) -> Swift.Bool
}
extension KlarnaMobileSDK.KlarnaCustomerProfile : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class KlarnaCheckoutViewDebug : KlarnaMobileSDK.KlarnaCheckoutView {
  @nonobjc @_Concurrency.MainActor(unsafe) public func registerTestAppDelegate(_ delegate: @escaping (KlarnaMobileSDK.KlarnaDebugEvent) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func loadUrl(_ url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func evaluateJS(_ script: Swift.String)
  @_Concurrency.MainActor(unsafe) public func clearWebViewCookies()
  @_Concurrency.MainActor(unsafe) public func clearWebViewCache()
  @_Concurrency.MainActor(unsafe) public func setInitScriptURL(_ url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func setMessageBridgeURL(_ url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func setSnippetBuildHash(_ buildHash: Swift.String?)
  @objc deinit
}
@available(*, deprecated, renamed: "KlarnaRegion", message: "Use KlarnaRegion instead.")
public typealias KlarnaOSMRegion = KlarnaMobileSDK.KlarnaRegion
@objc public protocol KlarnaScrollableComponent {
  @objc var isScrollEnabled: Swift.Bool { get set }
  @objc var contentInset: UIKit.UIEdgeInsets { get set }
  @objc var contentOffset: CoreFoundation.CGPoint { get }
  @objc @available(iOS 11.0, *)
  var contentInsetAdjustmentBehavior: UIKit.UIScrollView.ContentInsetAdjustmentBehavior { get set }
  @objc var keyboardDismissMode: UIKit.UIScrollView.KeyboardDismissMode { get set }
  @objc var parentScrollView: UIKit.UIScrollView? { get set }
  @objc var adjustsParentScrollViewInsets: Swift.Bool { get set }
}
@_hasMissingDesignatedInitializers public class KlarnaPayment {
  public func canMakePayment(country: Swift.String, currency: Swift.String) -> Swift.Bool
  public func request(paymentRequestId: Swift.String, options: KlarnaMobileSDK.KlarnaPaymentRequestOptions, delegate: any KlarnaMobileSDK.KlarnaPaymentRequestListener) -> Swift.Result<KlarnaMobileSDK.KlarnaPaymentRequest, KlarnaMobileSDK.KlarnaSDKError>
  public func request(paymentRequestData: KlarnaMobileSDK.KlarnaPaymentRequestData, options: KlarnaMobileSDK.KlarnaPaymentRequestOptions, delegate: any KlarnaMobileSDK.KlarnaPaymentRequestListener) -> Swift.Result<KlarnaMobileSDK.KlarnaPaymentRequest, KlarnaMobileSDK.KlarnaSDKError>
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class KlarnaPaymentError : KlarnaMobileSDK.KlarnaError {
  @objc final public let invalidFields: [Swift.String]?
  @objc final public let action: KlarnaMobileSDK.KlarnaPaymentAction?
  @objc deinit
}
public enum KlarnaPaymentButtonLabel : Swift.String {
  case `continue`
  case pay
  public var displayValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct KlarnaNationalIdentification : Swift.Equatable {
  public let country: Swift.String?
  public let number: Swift.String?
  public init(country: Swift.String?, number: Swift.String?)
  public static func == (a: KlarnaMobileSDK.KlarnaNationalIdentification, b: KlarnaMobileSDK.KlarnaNationalIdentification) -> Swift.Bool
}
extension KlarnaMobileSDK.KlarnaNationalIdentification : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIFont {
  public static func loadFonts()
}
@objc public enum KlarnaLoggingLevel : Swift.Int, Swift.CustomDebugStringConvertible {
  case off = 0
  case error = 1
  case verbose = 2
  public var stringValue: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension KlarnaMobileSDK.KlarnaPostPurchaseSDK {
  @objc convenience dynamic public init(environment: KlarnaMobileSDK.KlarnaEnvironment, region: KlarnaMobileSDK.KlarnaRegion, listener: any KlarnaMobileSDK.KlarnaPostPurchaseEventListener)
  @objc convenience dynamic public init(environment: KlarnaMobileSDK.KlarnaEnvironment, region: KlarnaMobileSDK.KlarnaRegion, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint, listener: any KlarnaMobileSDK.KlarnaPostPurchaseEventListener)
}
@objc extension KlarnaMobileSDK.KlarnaPostPurchaseSDK {
  @objc dynamic public func initialize(locale: Swift.String, purchaseCountry: Swift.String, design: Swift.String?)
  @objc dynamic public func authorizationRequest(clientId: Swift.String, scope: Swift.String, redirectUri: Swift.String, locale: Swift.String?, state: Swift.String?, loginHint: Swift.String?, responseType: Swift.String?)
  @objc dynamic public func renderOperation(operationToken: Swift.String, locale: Swift.String?, redirectUri: Swift.String?)
}
@objc extension KlarnaMobileSDK.KlarnaPostPurchaseSDK : KlarnaMobileSDK.KlarnaSingleComponent {
}
@objc extension KlarnaMobileSDK.KlarnaPostPurchaseSDK : KlarnaMobileSDK.KlarnaComponent {
  @objc dynamic public var region: KlarnaMobileSDK.KlarnaRegion? {
    @objc get
    @objc set
  }
  @objc dynamic public var environment: KlarnaMobileSDK.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @objc dynamic public var resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc dynamic public var theme: KlarnaMobileSDK.KlarnaTheme {
    @objc get
    @objc set
  }
  @objc dynamic public var eventHandler: (any KlarnaMobileSDK.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @objc dynamic public var loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @objc dynamic public var products: KlarnaMobileSDK.KlarnaProducts {
    @objc get
  }
}
@available(*, deprecated, message: "Use KlarnaProductEvent through eventHandler instead.")
@objc public class KlarnaEvent : ObjectiveC.NSObject {
  @objc final public let bodyString: Swift.String?
  required public init(from dictionary: [Swift.String : Swift.String])
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class KlarnaTextStyleConfiguration : ObjectiveC.NSObject {
  final public let textColor: UIKit.UIColor?
  final public let textFont: UIKit.UIFont?
  final public let textSize: CoreFoundation.CGFloat?
  @_inheritsConvenienceInitializers @objc(KlarnaTextStyleBuilder) public class Builder : ObjectiveC.NSObject {
    @objc public func setTextColor(_ color: UIKit.UIColor?) -> Self
    @objc public func setTextFont(_ font: UIKit.UIFont?) -> Self
    @objc public func setTextSize(_ size: CoreFoundation.CGFloat) -> Self
    @objc public func build() -> KlarnaMobileSDK.KlarnaTextStyleConfiguration
    @objc override dynamic public init()
    @objc deinit
  }
  @objc deinit
}
@objc public enum KlarnaPostPurchaseRenderResult : Swift.Int, Swift.CustomDebugStringConvertible, Swift.Codable {
  case noStateChange = 1
  case stateChange = 2
  public init?(stringValue: Swift.String)
  public var stringValue: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct KlarnaShippingRecipient : Swift.Equatable {
  public let attention: Swift.String?
  public let email: Swift.String?
  public let familyName: Swift.String?
  public let givenName: Swift.String?
  public let phone: Swift.String?
  public init(attention: Swift.String?, email: Swift.String?, familyName: Swift.String?, givenName: Swift.String?, phone: Swift.String?)
  public static func == (a: KlarnaMobileSDK.KlarnaShippingRecipient, b: KlarnaMobileSDK.KlarnaShippingRecipient) -> Swift.Bool
}
extension KlarnaMobileSDK.KlarnaShippingRecipient : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol KlarnaStandaloneComponent : KlarnaMobileSDK.KlarnaComponent, KlarnaMobileSDK.KlarnaResizableComponent, KlarnaMobileSDK.KlarnaScrollableComponent {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KlarnaCheckoutView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class KlarnaPaymentOptions : ObjectiveC.NSObject {
  public var initData: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public struct KlarnaLineItem : Swift.Equatable {
  public let imageUrl: Swift.String?
  public let name: Swift.String
  public let productIdentifier: Swift.String?
  public let productUrl: Swift.String?
  public let quantity: Swift.Int
  public let reference: Swift.String?
  public let totalAmount: Swift.Int
  public let totalTaxAmount: Swift.Int
  public let unitPrice: Swift.Int
  public init(imageUrl: Swift.String?, name: Swift.String, productIdentifier: Swift.String?, productUrl: Swift.String?, quantity: Swift.Int, reference: Swift.String?, totalAmount: Swift.Int, totalTaxAmount: Swift.Int, unitPrice: Swift.Int)
  public static func == (a: KlarnaMobileSDK.KlarnaLineItem, b: KlarnaMobileSDK.KlarnaLineItem) -> Swift.Bool
}
extension KlarnaMobileSDK.KlarnaLineItem : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(*, deprecated, renamed: "KlarnaTheme", message: "Use KlarnaTheme instead.")
public typealias KlarnaOSMTheme = KlarnaMobileSDK.KlarnaTheme
public typealias KlarnaPaymentAction = Swift.String
extension Swift.String {
  public static let initialize: Swift.String
  public static let load: Swift.String
  public static let loadPaymentReview: Swift.String
  public static let authorize: Swift.String
  public static let reauthorize: Swift.String
  public static let finalize: Swift.String
}
public typealias KlarnaErrorName = Swift.String
extension Swift.String {
  public static let klarnaMissingRegionError: Swift.String
  public static let klarnaMissingEnvironmentError: Swift.String
  public static let klarnaInvalidReturnURLError: Swift.String
  public static let klarnaReturnURLNotInInfoPlistError: Swift.String
  public static let klarnaEnvironmentNotSupportedError: Swift.String
  public static let klarnaFailedToBootstrapResourcesError: Swift.String
  public static let klarnaSdkNotAvailable: Swift.String
  public static let klarnaInternalError: Swift.String
}
public struct SupplementaryPurchaseData {
  public let customer: KlarnaMobileSDK.KlarnaPartnerCustomer?
  public let lineItems: [KlarnaMobileSDK.KlarnaLineItem]?
  public let purchaseReference: Swift.String?
  public let shipping: [KlarnaMobileSDK.KlarnaShipping]?
}
extension KlarnaMobileSDK.SupplementaryPurchaseData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias KlarnaEventParamKey = Swift.String
extension Swift.String {
  public static let klarnaComponentHeight: Swift.String
  public static let klarnaPaymentsApproved: Swift.String
  public static let klarnaPaymentsAuthToken: Swift.String
  public static let klarnaPaymentsFinalizeRequired: Swift.String
  public static let klarnaPostPurchaseRenderResult: Swift.String
  public static let klarnaSignInToken: Swift.String
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@objc @_Concurrency.MainActor(unsafe) public class KlarnaSignInButton : UIKit.UIControl {
  @objc @_Concurrency.MainActor(unsafe) public var buttonTheme: KlarnaMobileSDK.KlarnaButtonTheme {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var buttonShape: KlarnaMobileSDK.KlarnaButtonShape {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var buttonLabel: KlarnaMobileSDK.KlarnaButtonLabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var buttonLogoAlignment: KlarnaMobileSDK.KlarnaSignInButtonLogoAlignment {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public init(clientId: Swift.String, scope: Swift.String, market: Swift.String, locale: Swift.String, presentationContext: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, theme: KlarnaMobileSDK.KlarnaTheme = .light, environment: KlarnaMobileSDK.KlarnaEnvironment = .production, region: KlarnaMobileSDK.KlarnaRegion = .eu, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint = .alternative1, returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler, loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel = .off, tokenizationDelegate: (any KlarnaMobileSDK.KlarnaSignInTokenizationDelegate)? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
public enum KlarnaCustomerProfileCollection : Swift.String {
  case billingAddress
  case country
  case dateOfBirth
  case email
  case locale
  case name
  case nationalIdentification
  case phone
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension KlarnaMobileSDK.KlarnaCustomerProfileCollection : Swift.Codable {
}
@objc public enum KlarnaDebugEventType : Swift.Int {
  case log = 0
  case network = 1
  case message = 2
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class KlarnaDebugEvent : ObjectiveC.NSObject {
  final public let type: KlarnaMobileSDK.KlarnaDebugEventType
  final public let title: Swift.String
  final public let content: Swift.String
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
public struct KlarnaPaymentRequestOptions {
  public let appReturnUrl: Foundation.URL
  public class Builder {
    public init(appReturnUrl: Foundation.URL)
    public func build() -> KlarnaMobileSDK.KlarnaPaymentRequestOptions
    @objc deinit
  }
}
@objc public class KlarnaRegion : ObjectiveC.NSObject, Swift.RawRepresentable {
  public var rawValue: Swift.Int
  required public init?(rawValue: Swift.Int)
  @objc public static let eu: KlarnaMobileSDK.KlarnaRegion
  @objc public static let na: KlarnaMobileSDK.KlarnaRegion
  @objc public static let oc: KlarnaMobileSDK.KlarnaRegion
  public var stringValue: Swift.String {
    get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  public typealias RawValue = Swift.Int
  @objc deinit
}
@available(iOS 13.0, *)
@objc extension KlarnaMobileSDK.KlarnaSignInSDK {
  @objc convenience dynamic public init(returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler)
  @objc convenience dynamic public init(environment: KlarnaMobileSDK.KlarnaEnvironment, region: KlarnaMobileSDK.KlarnaRegion, returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler)
  @objc convenience dynamic public init(theme: KlarnaMobileSDK.KlarnaTheme, environment: KlarnaMobileSDK.KlarnaEnvironment, region: KlarnaMobileSDK.KlarnaRegion, returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler)
}
@available(iOS 13.0, *)
@objc extension KlarnaMobileSDK.KlarnaSignInSDK : KlarnaMobileSDK.KlarnaComponent {
  @objc dynamic public var region: KlarnaMobileSDK.KlarnaRegion? {
    @objc get
    @objc set
  }
  @objc dynamic public var environment: KlarnaMobileSDK.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @objc dynamic public var resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc dynamic public var theme: KlarnaMobileSDK.KlarnaTheme {
    @objc get
    @objc set
  }
  @objc dynamic public var eventHandler: (any KlarnaMobileSDK.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @objc dynamic public var loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @objc dynamic public var products: KlarnaMobileSDK.KlarnaProducts {
    @objc get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class KlarnaPaymentViewDebug : KlarnaMobileSDK.KlarnaPaymentView {
  @_Concurrency.MainActor(unsafe) public func registerTestAppDelegate(_ delegate: @escaping (KlarnaMobileSDK.KlarnaDebugEvent) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func loadUrl(_ url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func evaluateJS(_ script: Swift.String)
  @_Concurrency.MainActor(unsafe) public func clearWebViewCookies()
  @_Concurrency.MainActor(unsafe) public func clearWebViewCache()
  @_Concurrency.MainActor(unsafe) public func setInitScriptURL(_ url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func setMessageBridgeURL(_ url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func setPaymentsLibraryLibUrl(_ url: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setPaymentsLibraryAppVersion(_ version: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setPaymentsLibraryLibVersion(_ version: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setPaymentsWrapperURL(_ url: Foundation.URL, isLocalFile: Swift.Bool)
  @objc deinit
}
@objc public class KlarnaProductEvent : ObjectiveC.NSObject {
  @objc final public let action: KlarnaMobileSDK.KlarnaEventName
  @objc final public let products: KlarnaMobileSDK.KlarnaProducts
  final public let params: [KlarnaMobileSDK.KlarnaEventParamKey : any Swift.Decodable & Swift.Encodable]
  public init(action: KlarnaMobileSDK.KlarnaEventName, products: KlarnaMobileSDK.KlarnaProducts, params: [KlarnaMobileSDK.KlarnaEventParamKey : any Swift.Decodable & Swift.Encodable] = [:], sessionId: Swift.String? = nil)
  public init(action: KlarnaMobileSDK.KlarnaEventName, products: KlarnaMobileSDK.KlarnaProducts, params: [KlarnaMobileSDK.KlarnaEventParamKey : any Swift.Decodable & Swift.Encodable] = [:], isNonSpecificMerchantEvent: Swift.Bool = false, sessionId: Swift.String? = nil)
  public init(action: KlarnaMobileSDK.KlarnaEventName, products: KlarnaMobileSDK.KlarnaProducts, sessionId: Swift.String? = nil)
  @available(swift, obsoleted: 1.0)
  @objc public init?(action: KlarnaMobileSDK.KlarnaEventName, products: KlarnaMobileSDK.KlarnaProducts, params: [KlarnaMobileSDK.KlarnaEventParamKey : any Foundation.NSCoding] = [:])
  @available(swift, obsoleted: 1.0)
  @objc public func getParams() -> [KlarnaMobileSDK.KlarnaEventParamKey : any Foundation.NSCoding]?
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
public protocol KlarnaPaymentRequestListener : AnyObject {
  func onUpdate(request: KlarnaMobileSDK.KlarnaPaymentRequest)
  func onError(request: KlarnaMobileSDK.KlarnaPaymentRequest, error: KlarnaMobileSDK.KlarnaSDKError)
}
@_hasMissingDesignatedInitializers @objc public class KlarnaHybridSDK : ObjectiveC.NSObject {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class KlarnaError : ObjectiveC.NSObject, Swift.Error {
  @objc final public let name: KlarnaMobileSDK.KlarnaErrorName
  @objc final public let message: Swift.String
  @objc final public let isFatal: Swift.Bool
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol KlarnaSizingDelegate {
  @objc func klarnaComponent(_ klarnaComponent: any KlarnaMobileSDK.KlarnaComponent, resizedToHeight height: CoreFoundation.CGFloat)
}
@available(*, deprecated, renamed: "KlarnaEnvironment", message: "Use KlarnaEnvironment instead.")
public typealias KlarnaPostPurchaseEnvironment = KlarnaMobileSDK.KlarnaEnvironment
@_inheritsConvenienceInitializers @objc public class KlarnaProductOptions : ObjectiveC.NSObject {
  final public let paymentOptions: KlarnaMobileSDK.KlarnaPaymentOptions
  final public let checkoutOptions: KlarnaMobileSDK.KlarnaCheckoutOptions
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@objc public class KlarnaSignInSDK : ObjectiveC.NSObject {
  @objc public init(theme: KlarnaMobileSDK.KlarnaTheme = .light, environment: KlarnaMobileSDK.KlarnaEnvironment = .production, region: KlarnaMobileSDK.KlarnaRegion = .eu, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint = .alternative1, returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler, loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel = .off)
  @objc public func signIn(clientId: Swift.String, scope: Swift.String, market: Swift.String, locale: Swift.String? = nil, tokenizationId: Swift.String? = nil, presentationContext: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding)
  @objc deinit
}
public enum KlarnaShippingType : Swift.String {
  case digitalDownload
  case digitalEmail
  case digitalOther
  case physicalOther
  case pickupBox
  case pickupPoint
  case pickupStore
  case pickupWarehouse
  case toCurb
  case toDoor
  case toMailbox
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension KlarnaMobileSDK.KlarnaShippingType : Swift.Codable {
}
@available(*, deprecated, message: "Implement KlarnaSizingDelegate instead.")
@objc public protocol KlarnaOSMViewEventListener {
  @objc func klarnaOSMViewResized(_ height: CoreFoundation.CGFloat)
}
@objc public protocol KlarnaPostPurchaseEventListener {
  @objc func onAuthorizeRequested(klarnaPostPurchaseSDK: KlarnaMobileSDK.KlarnaPostPurchaseSDK)
  @objc func onInitialized(klarnaPostPurchaseSDK: KlarnaMobileSDK.KlarnaPostPurchaseSDK)
  @objc func onRenderedOperation(klarnaPostPurchaseSDK: KlarnaMobileSDK.KlarnaPostPurchaseSDK, result: KlarnaMobileSDK.KlarnaPostPurchaseRenderResult)
  @objc func onError(klarnaPostPurchaseSDK: KlarnaMobileSDK.KlarnaPostPurchaseSDK, error: KlarnaMobileSDK.KlarnaPostPurchaseError)
}
public enum KlarnaPaymentRequestStateReason : Swift.String {
  case confirmationTokenExpired
  case customerActionRequired
  case partnerCanceled
  case paymentRequestSubmitted
  case permanent
  case purchaseFlowAborted
  case stepUpRequired
  case technicalError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension KlarnaMobileSDK.KlarnaPaymentRequestStateReason : Swift.Codable {
}
@available(*, deprecated, message: "Deprecated for the same class without an 's'.")
public typealias KlarnaPaymentsError = KlarnaMobileSDK.KlarnaPaymentError
@_hasMissingDesignatedInitializers @objc public class KlarnaPostPurchaseError : KlarnaMobileSDK.KlarnaError {
  @objc final public let status: Swift.String?
  @objc deinit
}
public struct KlarnaShipping : Swift.Equatable {
  public let address: KlarnaMobileSDK.KlarnaAddress?
  public let recipient: KlarnaMobileSDK.KlarnaShippingRecipient?
  public let shippingOption: KlarnaMobileSDK.KlarnaShippingOption?
  public let shippingReference: Swift.String?
  public init(address: KlarnaMobileSDK.KlarnaAddress?, recipient: KlarnaMobileSDK.KlarnaShippingRecipient?, shippingOption: KlarnaMobileSDK.KlarnaShippingOption?, shippingReference: Swift.String?)
  public static func == (a: KlarnaMobileSDK.KlarnaShipping, b: KlarnaMobileSDK.KlarnaShipping) -> Swift.Bool
}
extension KlarnaMobileSDK.KlarnaShipping : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc extension KlarnaMobileSDK.KlarnaHybridSDK {
  @objc @available(*, deprecated, message: "This has been replaced with KlarnaProductOptions to accommodate more options.")
  dynamic public var klarnaInitData: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var productOptions: KlarnaMobileSDK.KlarnaProductOptions {
    @objc get
  }
  @objc dynamic public var fullscreenEventListener: (any KlarnaMobileSDK.KlarnaFullscreenEventListener)? {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Use the new initializer instead.")
  @objc convenience dynamic public init(returnUrl: Foundation.URL, eventListener: any KlarnaMobileSDK.KlarnaHybridEventListener, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint = .alternative1)
  @available(*, deprecated, message: "Use the new initializer instead.")
  @objc convenience dynamic public init(returnUrl: Foundation.URL, eventListener: any KlarnaMobileSDK.KlarnaHybridEventListener)
  @available(*, deprecated, message: "Use the new initializer instead.")
  @objc convenience dynamic public init(returnUrl: Foundation.URL, klarnaEventListener: any KlarnaMobileSDK.KlarnaEventListener, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint = .alternative1)
  @available(*, deprecated, message: "Use the new initializer instead.")
  @objc convenience dynamic public init(returnUrl: Foundation.URL, klarnaEventListener: any KlarnaMobileSDK.KlarnaEventListener)
  @objc convenience dynamic public init(returnUrl: Foundation.URL, klarnaEventHandler: any KlarnaMobileSDK.KlarnaEventHandler, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint = .alternative1)
  @objc convenience dynamic public init(returnUrl: Foundation.URL, klarnaEventHandler: any KlarnaMobileSDK.KlarnaEventHandler, environment: KlarnaMobileSDK.KlarnaEnvironment, region: KlarnaMobileSDK.KlarnaRegion, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint = .alternative1)
}
@objc extension KlarnaMobileSDK.KlarnaHybridSDK {
  @objc dynamic public func addWebView(_ webView: WebKit.WKWebView)
  @objc dynamic public func newPageLoad(in webView: WebKit.WKWebView)
  @available(*, deprecated, message: "Use the `newPageLoad` instead.")
  @objc dynamic public func newPageWillLoad(in webView: WebKit.WKWebView)
  @objc dynamic public func shouldFollowNavigation(withRequest request: Foundation.URLRequest) -> Swift.Bool
  @available(*, deprecated, message: "Do not use.")
  @objc public static func deviceIdentifier() -> Swift.String
  @available(*, deprecated, message: "SDK does not need this to be called anymore. Will be removed in future releases.")
  @objc public static func handleDeeplink(withUrl url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any])
  @available(*, deprecated, message: "Replaced with implementing KlarnaEventHandler set as EventHandler.")
  @objc dynamic public func registerEventListener(withCallback callback: @escaping (KlarnaMobileSDK.KlarnaEvent) -> ())
}
@objc extension KlarnaMobileSDK.KlarnaHybridSDK : KlarnaMobileSDK.KlarnaMultiComponent {
  @objc dynamic public var region: KlarnaMobileSDK.KlarnaRegion? {
    @objc get
    @objc set
  }
  @objc dynamic public var environment: KlarnaMobileSDK.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @objc dynamic public var resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc dynamic public var theme: KlarnaMobileSDK.KlarnaTheme {
    @objc get
    @objc set
  }
  @objc dynamic public var eventHandler: (any KlarnaMobileSDK.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @objc dynamic public var loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @objc dynamic public var products: KlarnaMobileSDK.KlarnaProducts {
    @objc get
  }
  @objc dynamic public var enabledProducts: KlarnaMobileSDK.KlarnaProducts {
    @objc get
    @objc set
  }
  @objc dynamic public func sendEvent(_ event: KlarnaMobileSDK.KlarnaProductEvent)
}
@objc public enum KlarnaTheme : Swift.Int, Swift.CustomDebugStringConvertible {
  case dark
  case light
  case automatic
  public var stringValue: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct KlarnaPaymentRequestConfiguration {
  public let allowedShippingCountries: [Swift.String]?
  public let requestCustomerProfile: [KlarnaMobileSDK.KlarnaCustomerProfileCollection]?
  public let requestShippingData: [KlarnaMobileSDK.KlarnaShippingCollection]?
  public class Builder {
    public init()
    @discardableResult
    public func setAllowedShippingCountries(_ countries: [Swift.String]) -> KlarnaMobileSDK.KlarnaPaymentRequestConfiguration.Builder
    @discardableResult
    public func setRequestCustomerProfile(_ req: [KlarnaMobileSDK.KlarnaCustomerProfileCollection]) -> KlarnaMobileSDK.KlarnaPaymentRequestConfiguration.Builder
    @discardableResult
    public func setRequestShippingData(_ req: [KlarnaMobileSDK.KlarnaShippingCollection]) -> KlarnaMobileSDK.KlarnaPaymentRequestConfiguration.Builder
    public func build() -> KlarnaMobileSDK.KlarnaPaymentRequestConfiguration
    @objc deinit
  }
}
extension KlarnaMobileSDK.KlarnaPaymentRequestConfiguration : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc extension KlarnaMobileSDK.KlarnaPaymentView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var category: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isAvalable: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var paymentOptions: KlarnaMobileSDK.KlarnaPaymentOptions {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(category: Swift.String, eventListener: any KlarnaMobileSDK.KlarnaPaymentEventListener)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(category: Swift.String, returnUrl: Foundation.URL, eventListener: any KlarnaMobileSDK.KlarnaPaymentEventListener)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(category: Swift.String, returnUrl: Foundation.URL, eventListener: any KlarnaMobileSDK.KlarnaPaymentEventListener, environment: KlarnaMobileSDK.KlarnaEnvironment, region: KlarnaMobileSDK.KlarnaRegion)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(category: Swift.String, eventListener: any KlarnaMobileSDK.KlarnaPaymentEventListener, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(category: Swift.String, returnUrl: Foundation.URL, eventListener: any KlarnaMobileSDK.KlarnaPaymentEventListener, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint)
  @available(*, deprecated, message: "Use the new initializer instead.")
  @nonobjc @_Concurrency.MainActor(unsafe) convenience public init(clientToken: Swift.String, category: Swift.String, returnUrl: Foundation.URL, delegate: any KlarnaMobileSDK.KlarnaPaymentViewDelegate, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint = .alternative1)
}
@objc extension KlarnaMobileSDK.KlarnaPaymentView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func initialize(clientToken: Swift.String, returnUrl: Foundation.URL)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func initialize(clientToken: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func load(jsonData: Swift.String? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadPaymentReview()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func authorize(jsonData: Swift.String? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func authorize(autoFinalize: Swift.Bool, jsonData: Swift.String? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func reauthorize(jsonData: Swift.String? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func finalise(jsonData: Swift.String? = nil)
}
@objc extension KlarnaMobileSDK.KlarnaPaymentView : KlarnaMobileSDK.KlarnaSingleComponent {
}
@objc extension KlarnaMobileSDK.KlarnaPaymentView : KlarnaMobileSDK.KlarnaStandaloneComponent {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var region: KlarnaMobileSDK.KlarnaRegion? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var environment: KlarnaMobileSDK.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var theme: KlarnaMobileSDK.KlarnaTheme {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var eventHandler: (any KlarnaMobileSDK.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var products: KlarnaMobileSDK.KlarnaProducts {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var sizingDelegate: (any KlarnaMobileSDK.KlarnaSizingDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var isScrollEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentOffset: CoreFoundation.CGPoint {
    @objc get
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentInsetAdjustmentBehavior: UIKit.UIScrollView.ContentInsetAdjustmentBehavior {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var keyboardDismissMode: UIKit.UIScrollView.KeyboardDismissMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var parentScrollView: UIKit.UIScrollView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var adjustsParentScrollViewInsets: Swift.Bool {
    @objc get
    @objc set
  }
}
@available(iOS 13.0, *)
@objc extension KlarnaMobileSDK.KlarnaSignInButton {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var clientId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var scope: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var market: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var locale: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(clientId: Swift.String, scope: Swift.String, market: Swift.String, locale: Swift.String, presentationContext: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(clientId: Swift.String, scope: Swift.String, market: Swift.String, locale: Swift.String, presentationContext: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, environment: KlarnaMobileSDK.KlarnaEnvironment, region: KlarnaMobileSDK.KlarnaRegion, returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(clientId: Swift.String, scope: Swift.String, market: Swift.String, locale: Swift.String, presentationContext: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, theme: KlarnaMobileSDK.KlarnaTheme, environment: KlarnaMobileSDK.KlarnaEnvironment, region: KlarnaMobileSDK.KlarnaRegion, returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler)
}
@available(iOS 13.0, *)
@objc extension KlarnaMobileSDK.KlarnaSignInButton : KlarnaMobileSDK.KlarnaSingleComponent {
}
@available(iOS 13.0, *)
@objc extension KlarnaMobileSDK.KlarnaSignInButton {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var region: KlarnaMobileSDK.KlarnaRegion? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var environment: KlarnaMobileSDK.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var theme: KlarnaMobileSDK.KlarnaTheme {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var eventHandler: (any KlarnaMobileSDK.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var products: KlarnaMobileSDK.KlarnaProducts {
    @objc get
  }
}
@available(*, deprecated, message: "Use KlarnaPaymentViewEventListener instead.")
public protocol KlarnaPaymentViewDelegate : KlarnaMobileSDK.KlarnaEventHandler {
  func klarnaPaymentViewInitialized(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  func klarnaPaymentViewLoaded(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  func klarnaPaymentViewLoadedPaymentReview(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool?, authorizedWithToken authToken: Swift.String?, finalizeRequired: Swift.Bool?)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool?, reauthorizedWithToken authToken: Swift.String?)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool?, finalizedWithToken authToken: Swift.String?)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, resizedToHeight height: CoreFoundation.CGFloat)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, failedWithError error: KlarnaMobileSDK.KlarnaPaymentsError)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class KlarnaOSMView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var hostViewController: UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) public var styleConfiguration: KlarnaMobileSDK.KlarnaOSMStyleConfiguration?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
public enum KlarnaPaymentButtonState : Swift.String {
  case `default`
  case disabled
  case loading
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol KlarnaSingleComponent : KlarnaMobileSDK.KlarnaComponent {
}
public typealias KlarnaPostPurchaseErrorName = Swift.String
@objc public protocol KlarnaComponent {
  @objc var returnURL: Foundation.URL? { get set }
  @objc var region: KlarnaMobileSDK.KlarnaRegion? { get set }
  @objc var environment: KlarnaMobileSDK.KlarnaEnvironment? { get set }
  @objc var resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint { get set }
  @objc var theme: KlarnaMobileSDK.KlarnaTheme { get set }
  @objc var eventHandler: (any KlarnaMobileSDK.KlarnaEventHandler)? { get set }
  @objc var loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel { get set }
  @objc var products: KlarnaMobileSDK.KlarnaProducts { get }
}
@_hasMissingDesignatedInitializers public class KlarnaPaymentRequest {
  public var paymentRequestId: Swift.String? {
    get
  }
  public var state: KlarnaMobileSDK.KlarnaPaymentRequestState {
    get
  }
  public var stateContext: KlarnaMobileSDK.KlarnaPaymentRequestStateContext? {
    get
  }
  public var stateReason: KlarnaMobileSDK.KlarnaPaymentRequestStateReason? {
    get
  }
  public func cancel(callback: @escaping (Swift.Result<(), KlarnaMobileSDK.KlarnaSDKError>) -> Swift.Void)
  public func fetch(callback: @escaping (Swift.Result<(), KlarnaMobileSDK.KlarnaSDKError>) -> Swift.Void)
  public func initiate(callback: @escaping (Swift.Result<(), KlarnaMobileSDK.KlarnaSDKError>) -> Swift.Void)
  public func prepare(callback: @escaping (Swift.Result<(), KlarnaMobileSDK.KlarnaSDKError>) -> Swift.Void)
  public func update(data: KlarnaMobileSDK.KlarnaPaymentRequestData, callback: @escaping (Swift.Result<(), KlarnaMobileSDK.KlarnaSDKError>) -> Swift.Void)
  @objc deinit
}
public typealias KlarnaProducts = Swift.Set<KlarnaMobileSDK.KlarnaProduct>
public typealias KlarnaProduct = Swift.String
extension Swift.String {
  public static let payments: Swift.String
  public static let checkout: Swift.String
  public static let expressButton: Swift.String
  public static let postPurchase: Swift.String
  public static let onSiteMessaging: Swift.String
  public static let oneTimeCard: Swift.String
  public static let inStore: Swift.String
  public static let signIn: Swift.String
}
extension Swift.Set where Element == Swift.String {
  public static let payments: KlarnaMobileSDK.KlarnaProducts
  public static let checkout: KlarnaMobileSDK.KlarnaProducts
  public static let expressButton: KlarnaMobileSDK.KlarnaProducts
  public static let postPurchase: KlarnaMobileSDK.KlarnaProducts
  public static let onSiteMessaging: KlarnaMobileSDK.KlarnaProducts
  public static let oneTimeCard: KlarnaMobileSDK.KlarnaProducts
  public static let inStore: KlarnaMobileSDK.KlarnaProducts
  public static let signIn: KlarnaMobileSDK.KlarnaProducts
  public static var all: KlarnaMobileSDK.KlarnaProducts {
    get
  }
  public static var none: KlarnaMobileSDK.KlarnaProducts {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValues: [Swift.String] {
    get
  }
}
public typealias KlarnaExpressButtonErrorName = Swift.String
extension Swift.String {
  public static let KlarnaExpressButtonErrorInvalidParams: Swift.String
  public static let KlarnaExpressButtonErrorMerchantDisabled: Swift.String
  public static let KlarnaExpressButtonErrorRender: Swift.String
}
public typealias KlarnaOSMErrorName = Swift.String
extension Swift.String {
  public static let KlarnaOSMErrorMissingClientId: Swift.String
  public static let KlarnaOSMErrorMissingPlacementKey: Swift.String
  public static let KlarnaOSMErrorInvalidLocale: Swift.String
  public static let KlarnaOSMErrorMissingHost: Swift.String
  public static let KlarnaOSMErrorDisabled: Swift.String
  public static let KlarnaOSMErrorNetworkError: Swift.String
  public static let KlarnaOSMErrorMissingRegion: Swift.String
  public static let KlarnaOSMErrorPlacementError: Swift.String
  public static let KlarnaOSMErrorNoContent: Swift.String
}
@_hasMissingDesignatedInitializers public class Klarna {
  public static func initialize(configuration: KlarnaMobileSDK.KlarnaConfiguration) -> KlarnaMobileSDK.Klarna
  public var payment: KlarnaMobileSDK.KlarnaPayment {
    get
  }
  @objc deinit
}
@objc public protocol KlarnaStandaloneWebViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, handler: (_ policy: WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, didReceiveRedirectForProvisionalNavigation navigation: WebKit.WKNavigation)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, didCommit navigation: WebKit.WKNavigation)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, didFinish navigation: WebKit.WKNavigation)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation, withError error: any Swift.Error)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, didFail navigation: WebKit.WKNavigation, withError error: any Swift.Error)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, forNavigation navigationAction: WebKit.WKNavigationAction, withFeatures windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @available(iOS 15.0, *)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, requestMediaCapturePermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, ofType type: WebKit.WKMediaCaptureType, handler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
}
@available(*, deprecated, message: "Use KlarnaEventHandler and KlarnaFullscreenEventListener instead.")
@objc public protocol KlarnaHybridEventListener : KlarnaMobileSDK.KlarnaFullscreenEventListener {
  @objc func klarnaFailed(inWebView webView: any KlarnaMobileSDK.KlarnaWebView, withError error: KlarnaMobileSDK.KlarnaMobileSDKError)
}
@objc public protocol KlarnaDebugEventDelegate {
  @objc func klarnaComponent(_ klarnaComponent: any KlarnaMobileSDK.KlarnaComponent, relayedEvent event: KlarnaMobileSDK.KlarnaDebugEvent)
}
public enum KlarnaPaymentRequestStateContext : Swift.Equatable {
  case canceled
  case confirmed(klarnaCustomer: KlarnaMobileSDK.KlarnaCustomer, paymentTransactionId: Swift.String, shipping: KlarnaMobileSDK.KlarnaShipping)
  case declined
  case expired
  case inProgress
  case pendingConfirmation(klarnaCustomer: KlarnaMobileSDK.KlarnaCustomer, paymentConfirmationToken: Swift.String, shipping: KlarnaMobileSDK.KlarnaShipping)
  case prepared(shipping: KlarnaMobileSDK.KlarnaShipping)
  case submitted
  public static func == (a: KlarnaMobileSDK.KlarnaPaymentRequestStateContext, b: KlarnaMobileSDK.KlarnaPaymentRequestStateContext) -> Swift.Bool
}
extension KlarnaMobileSDK.KlarnaPaymentRequestStateContext : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct KlarnaUserAccountLinking : Swift.Equatable {
  public let userAccountLinkingIdToken: Swift.String?
  public let userAccountLinkingRefreshToken: Swift.String?
  public init(userAccountLinkingIdToken: Swift.String?, userAccountLinkingRefreshToken: Swift.String?)
  public static func == (a: KlarnaMobileSDK.KlarnaUserAccountLinking, b: KlarnaMobileSDK.KlarnaUserAccountLinking) -> Swift.Bool
}
extension KlarnaMobileSDK.KlarnaUserAccountLinking : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias RenderResult = (_ error: KlarnaMobileSDK.KlarnaError?) -> ()
@objc extension KlarnaMobileSDK.KlarnaOSMView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var clientId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var placementKey: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var locale: Swift.String {
    @objc get
    @objc set
  }
  @nonobjc @_Concurrency.MainActor(unsafe) public var purchaseAmount: Swift.Int? {
    get
    set
  }
  @available(*, deprecated, message: "Set a KlarnaSizingDelegate on sizingDelegate instead.")
  @objc @_Concurrency.MainActor(unsafe) weak dynamic public var delegate: (any KlarnaMobileSDK.KlarnaOSMViewEventListener)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(environment: KlarnaMobileSDK.KlarnaEnvironment, region: KlarnaMobileSDK.KlarnaRegion, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setPurchaseAmount(_ amount: Foundation.NSNumber?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func render(callback: @escaping KlarnaMobileSDK.RenderResult)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func render()
}
@objc extension KlarnaMobileSDK.KlarnaOSMView : KlarnaMobileSDK.KlarnaSingleComponent {
}
@objc extension KlarnaMobileSDK.KlarnaOSMView : KlarnaMobileSDK.KlarnaStandaloneComponent {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var region: KlarnaMobileSDK.KlarnaRegion? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var environment: KlarnaMobileSDK.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var theme: KlarnaMobileSDK.KlarnaTheme {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var eventHandler: (any KlarnaMobileSDK.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var products: KlarnaMobileSDK.KlarnaProducts {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var sizingDelegate: (any KlarnaMobileSDK.KlarnaSizingDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var isScrollEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentOffset: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentInsetAdjustmentBehavior: UIKit.UIScrollView.ContentInsetAdjustmentBehavior {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var keyboardDismissMode: UIKit.UIScrollView.KeyboardDismissMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var parentScrollView: UIKit.UIScrollView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var adjustsParentScrollViewInsets: Swift.Bool {
    @objc get
    @objc set
  }
}
public typealias KlarnaPaymentMethodCategory = Swift.String
extension Swift.String {
  public static let PayNow: Swift.String
  public static let PayLater: Swift.String
  public static let SliceIt: Swift.String
  public static let PayInParts: Swift.String
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class KlarnaStandaloneWebView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var estimatedProgress: Swift.Double {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var delegate: (any KlarnaMobileSDK.KlarnaStandaloneWebViewDelegate)? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public init(returnURL: Foundation.URL)
  @objc @_Concurrency.MainActor(unsafe) public init(returnURL: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler, environment: KlarnaMobileSDK.KlarnaEnvironment, region: KlarnaMobileSDK.KlarnaRegion)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
extension KlarnaMobileSDK.KlarnaStandaloneWebView {
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadURLRequest(_ request: Foundation.URLRequest) -> WebKit.WKNavigation?
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadURL(_ url: Foundation.URL) -> WebKit.WKNavigation?
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadFileURL(_ url: Foundation.URL, allowingReadAccessTo readAccessUrl: Foundation.URL) -> WebKit.WKNavigation?
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadHTML(_ htmlString: Swift.String, withBaseURL baseUrl: Foundation.URL? = nil) -> WebKit.WKNavigation?
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func reload() -> WebKit.WKNavigation?
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func reloadFromOrigin() -> WebKit.WKNavigation?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func stopLoading()
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func goBack() -> WebKit.WKNavigation?
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) dynamic public func goForward() -> WebKit.WKNavigation?
  @objc @_Concurrency.MainActor(unsafe) dynamic public var url: Foundation.URL? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var title: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isLoading: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var canGoForward: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var canGoBack: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var contentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isInspectable: Swift.Bool {
    @objc get
    @objc set
  }
  @available(iOS 15.0, *)
  @objc @_Concurrency.MainActor(unsafe) dynamic public var underPageBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var allowsBackForwardAnimationGestures: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var allowsLinkPreview: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isOpaque: Swift.Bool {
    @objc get
    @objc set
  }
  @available(iOS 14, *)
  @_Concurrency.MainActor(unsafe) public func evaluateJavaScript(_ javaScript: Swift.String, frame: WebKit.WKFrameInfo? = nil, contentWorld: WebKit.WKContentWorld = WKContentWorld.page, completion: ((_ result: Swift.Result<Any, any Swift.Error>) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func evaluateJavaScript(_ javaScript: Swift.String, frame: WebKit.WKFrameInfo? = nil, completion: (((Any?, (any Swift.Error)?) -> Swift.Void))? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addUserScript(_ script: WebKit.WKUserScript)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func removeAllUserScripts()
  @objc @_Concurrency.MainActor(unsafe) dynamic public var userScripts: [WebKit.WKUserScript] {
    @objc get
  }
  @available(iOS 14.0, *)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addScriptMessageHandler(_ scriptMessageHandler: any WebKit.WKScriptMessageHandler, named name: Swift.String, to contentWorld: WebKit.WKContentWorld = WKContentWorld.page)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addScriptMessageHandler(_ scriptMessageHandler: any WebKit.WKScriptMessageHandler, named name: Swift.String)
  @available(iOS 14.0, *)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addScriptMessageHandlerWithReply(_ scriptMessageHandlerWithReply: any WebKit.WKScriptMessageHandlerWithReply, named name: Swift.String, to contentWorld: WebKit.WKContentWorld = WKContentWorld.page)
  @available(iOS 14.0, *)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func removeScriptMessageHandler(named name: Swift.String, from contentWorld: WebKit.WKContentWorld = WKContentWorld.page)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func removeScriptMessageHandler(named name: Swift.String)
  @available(iOS 14.0, *)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func removeAllScriptMessageHandlers(from contentWorld: WebKit.WKContentWorld = WKContentWorld.page)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func removeAllScriptMessageHandlers()
  @objc @_Concurrency.MainActor(unsafe) dynamic public var scriptMessageHandlers: [any WebKit.WKScriptMessageHandler] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var scriptMessageHandlersWithReply: [any WebKit.WKScriptMessageHandlerWithReply] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var cachingEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func clearCache()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func clearCookies()
}
extension KlarnaMobileSDK.KlarnaStandaloneWebView : KlarnaMobileSDK.KlarnaMultiComponent {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var productOptions: KlarnaMobileSDK.KlarnaProductOptions {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var enabledProducts: KlarnaMobileSDK.KlarnaProducts {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sendEvent(_ event: KlarnaMobileSDK.KlarnaProductEvent)
}
extension KlarnaMobileSDK.KlarnaStandaloneWebView : KlarnaMobileSDK.KlarnaStandaloneComponent {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var region: KlarnaMobileSDK.KlarnaRegion? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var environment: KlarnaMobileSDK.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var theme: KlarnaMobileSDK.KlarnaTheme {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var eventHandler: (any KlarnaMobileSDK.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var products: KlarnaMobileSDK.KlarnaProducts {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var sizingDelegate: (any KlarnaMobileSDK.KlarnaSizingDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var isScrollEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentOffset: CoreFoundation.CGPoint {
    @objc get
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentInsetAdjustmentBehavior: UIKit.UIScrollView.ContentInsetAdjustmentBehavior {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var keyboardDismissMode: UIKit.UIScrollView.KeyboardDismissMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var parentScrollView: UIKit.UIScrollView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var adjustsParentScrollViewInsets: Swift.Bool {
    @objc get
    @objc set
  }
}
public enum KlarnaPaymentRequestState : Swift.String {
  case canceled
  case confirmed
  case created
  case declined
  case expired
  case inProgress
  case pendingConfirmation
  case prepared
  case submitted
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension KlarnaMobileSDK.KlarnaPaymentRequestState : Swift.Codable {
}
public struct KlarnaPartnerCustomer {
  public let address: KlarnaMobileSDK.KlarnaAddress?
  public let email: Swift.String?
  public let familyName: Swift.String?
  public let givenName: Swift.String?
  public let phone: Swift.String?
}
extension KlarnaMobileSDK.KlarnaPartnerCustomer : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct KlarnaAddress : Swift.Equatable {
  public let city: Swift.String?
  public let country: Swift.String?
  public let postalCode: Swift.String?
  public let region: Swift.String?
  public let streetAddress: Swift.String?
  public let streetAddress2: Swift.String?
  public init(city: Swift.String?, country: Swift.String?, postalCode: Swift.String?, region: Swift.String?, streetAddress: Swift.String, streetAddress2: Swift.String?)
  public static func == (a: KlarnaMobileSDK.KlarnaAddress, b: KlarnaMobileSDK.KlarnaAddress) -> Swift.Bool
}
extension KlarnaMobileSDK.KlarnaAddress : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc extension KlarnaMobileSDK.KlarnaCheckoutView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var checkoutOptions: KlarnaMobileSDK.KlarnaCheckoutOptions? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(returnURL: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(returnURL: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler, environment: KlarnaMobileSDK.KlarnaEnvironment, region: KlarnaMobileSDK.KlarnaRegion, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint = .alternative1)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(returnURL: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint)
}
@objc extension KlarnaMobileSDK.KlarnaCheckoutView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setSnippet(_ snippet: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func suspend()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func resume()
}
@objc extension KlarnaMobileSDK.KlarnaCheckoutView : KlarnaMobileSDK.KlarnaSingleComponent {
}
@objc extension KlarnaMobileSDK.KlarnaCheckoutView : KlarnaMobileSDK.KlarnaStandaloneComponent {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var region: KlarnaMobileSDK.KlarnaRegion? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var environment: KlarnaMobileSDK.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var theme: KlarnaMobileSDK.KlarnaTheme {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var eventHandler: (any KlarnaMobileSDK.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var products: KlarnaMobileSDK.KlarnaProducts {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var sizingDelegate: (any KlarnaMobileSDK.KlarnaSizingDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var isScrollEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentOffset: CoreFoundation.CGPoint {
    @objc get
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentInsetAdjustmentBehavior: UIKit.UIScrollView.ContentInsetAdjustmentBehavior {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var keyboardDismissMode: UIKit.UIScrollView.KeyboardDismissMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var parentScrollView: UIKit.UIScrollView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var adjustsParentScrollViewInsets: Swift.Bool {
    @objc get
    @objc set
  }
}
public struct KlarnaShippingOption : Swift.Equatable {
  public let shippingCarrier: Swift.String?
  public let shippingType: KlarnaMobileSDK.KlarnaShippingType?
  public let shippingTypeAttributes: [KlarnaMobileSDK.KlarnaShippingTypeAttributes]?
  public init(shippingCarrier: Swift.String?, shippingType: KlarnaMobileSDK.KlarnaShippingType?, shippingTypeAttributes: [KlarnaMobileSDK.KlarnaShippingTypeAttributes]?)
  public static func == (a: KlarnaMobileSDK.KlarnaShippingOption, b: KlarnaMobileSDK.KlarnaShippingOption) -> Swift.Bool
}
extension KlarnaMobileSDK.KlarnaShippingOption : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol KlarnaMultiComponent : KlarnaMobileSDK.KlarnaComponent {
  @objc var enabledProducts: KlarnaMobileSDK.KlarnaProducts { get set }
  @objc func sendEvent(_ event: KlarnaMobileSDK.KlarnaProductEvent)
  @objc var productOptions: KlarnaMobileSDK.KlarnaProductOptions { get }
}
@objc @_inheritsConvenienceInitializers public class KlarnaCheckoutOptions : ObjectiveC.NSObject {
  public var merchantHandlesEPM: Swift.Bool
  public var merchantHandlesValidationErrors: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class KlarnaOSMStyleConfiguration : ObjectiveC.NSObject {
  final public let backgroundColor: UIKit.UIColor?
  final public let textStyleConfiguration: KlarnaMobileSDK.KlarnaTextStyleConfiguration?
  @_inheritsConvenienceInitializers @objc(KlarnaOSMStyleBuilder) public class Builder : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc public func setBackgroundColor(_ color: UIKit.UIColor?) -> Self
    @objc public func setTextStyleConfiguration(_ configuration: KlarnaMobileSDK.KlarnaTextStyleConfiguration) -> Self
    @objc public func build() -> KlarnaMobileSDK.KlarnaOSMStyleConfiguration
    @objc deinit
  }
  @objc deinit
}
public struct KlarnaPaymentButtonConfiguration {
  public let label: KlarnaMobileSDK.KlarnaPaymentButtonLabel?
  public let shape: KlarnaMobileSDK.KlarnaButtonShape?
  public let state: KlarnaMobileSDK.KlarnaPaymentButtonState?
  public let style: KlarnaMobileSDK.KlarnaButtonStyle?
  public let theme: KlarnaMobileSDK.KlarnaTheme?
  public class Builder {
    public init()
    @discardableResult
    public func setLabel(_ label: KlarnaMobileSDK.KlarnaPaymentButtonLabel) -> Self
    @discardableResult
    public func setShape(_ shape: KlarnaMobileSDK.KlarnaButtonShape) -> Self
    @discardableResult
    public func setState(_ state: KlarnaMobileSDK.KlarnaPaymentButtonState) -> Self
    @discardableResult
    public func setStyle(_ style: KlarnaMobileSDK.KlarnaButtonStyle) -> Self
    @discardableResult
    public func setTheme(_ theme: KlarnaMobileSDK.KlarnaTheme) -> Self
    public func build() -> KlarnaMobileSDK.KlarnaPaymentButtonConfiguration
    @objc deinit
  }
}
public struct KlarnaSignInToken : Swift.Codable {
  public let idToken: Swift.String?
  public let accessToken: Swift.String?
  public let refreshToken: Swift.String?
  public let scope: Swift.String?
  public let tokenType: Swift.String?
  public let expiresIn: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public enum KlarnaWebViewOpeningBehavior : Swift.Int, Swift.CustomDebugStringConvertible {
  case delegate
  case ignore
  case navigate
  case systemBrowser
  case internalBrowser
  public var debugDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@_Concurrency.MainActor(unsafe) public class KlarnaSignInButtonDebug : KlarnaMobileSDK.KlarnaSignInButton {
  @_Concurrency.MainActor(unsafe) public func setEphemeralWebBrowserSession(enabled: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setPrompt(_ query: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override public init(clientId: Swift.String, scope: Swift.String, market: Swift.String, locale: Swift.String, presentationContext: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, theme: KlarnaMobileSDK.KlarnaTheme = super, environment: KlarnaMobileSDK.KlarnaEnvironment = super, region: KlarnaMobileSDK.KlarnaRegion = super, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint = super, returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler, loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel = super, tokenizationDelegate: (any KlarnaMobileSDK.KlarnaSignInTokenizationDelegate)? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class KlarnaSignInSDKDebug : KlarnaMobileSDK.KlarnaSignInSDK {
  public func setEphemeralWebBrowserSession(enabled: Swift.Bool)
  public func setPrompt(_ query: Swift.String?)
  @objc override public init(theme: KlarnaMobileSDK.KlarnaTheme = super, environment: KlarnaMobileSDK.KlarnaEnvironment = super, region: KlarnaMobileSDK.KlarnaRegion = super, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint = super, returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler, loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel = super)
  @objc deinit
}
public enum KlarnaShippingTypeAttributes : Swift.String {
  case contactLessDelivery
  case express
  case identificationRequired
  case leaveAtCurb
  case leaveAtDoor
  case leaveWithNeighbour
  case signatureRequired
  case tracked
  case untracked
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension KlarnaMobileSDK.KlarnaShippingTypeAttributes : Swift.Codable {
}
public struct KlarnaPaymentRequestData {
  public let config: KlarnaMobileSDK.KlarnaPaymentRequestConfiguration?
  public let currency: Swift.String
  public let paymentAmount: Swift.Int
  public let paymentRequestReference: Swift.String?
  public let supplementaryPurchaseData: KlarnaMobileSDK.SupplementaryPurchaseData?
  public class Builder {
    public init(currency: Swift.String, paymentAmount: Swift.Int)
    @discardableResult
    public func setConfig(_ config: KlarnaMobileSDK.KlarnaPaymentRequestConfiguration) -> KlarnaMobileSDK.KlarnaPaymentRequestData.Builder
    @discardableResult
    public func setPaymentRequestReference(_ paymentRequestReference: Swift.String) -> KlarnaMobileSDK.KlarnaPaymentRequestData.Builder
    @discardableResult
    public func setSupplementaryPurchaseData(_ supplementaryPurchaseData: KlarnaMobileSDK.SupplementaryPurchaseData) -> KlarnaMobileSDK.KlarnaPaymentRequestData.Builder
    public func build() -> KlarnaMobileSDK.KlarnaPaymentRequestData
    @objc deinit
  }
}
extension KlarnaMobileSDK.KlarnaPaymentRequestData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc extension KlarnaMobileSDK.KlarnaExpressButton {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var clientId: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var locale: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(clientId: Swift.String, locale: Swift.String = "en-US", returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(clientId: Swift.String, locale: Swift.String = "en-US", buttonTheme: KlarnaMobileSDK.KlarnaButtonTheme = .klarna, buttonShape: KlarnaMobileSDK.KlarnaButtonShape = .roundedRect, buttonLabel: KlarnaMobileSDK.KlarnaButtonLabel = .klarnaProduct, returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler)
}
@objc extension KlarnaMobileSDK.KlarnaExpressButton : KlarnaMobileSDK.KlarnaSingleComponent {
}
@objc extension KlarnaMobileSDK.KlarnaExpressButton : KlarnaMobileSDK.KlarnaStandaloneComponent {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var region: KlarnaMobileSDK.KlarnaRegion? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var environment: KlarnaMobileSDK.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var theme: KlarnaMobileSDK.KlarnaTheme {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var eventHandler: (any KlarnaMobileSDK.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var loggingLevel: KlarnaMobileSDK.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var products: KlarnaMobileSDK.KlarnaProducts {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var sizingDelegate: (any KlarnaMobileSDK.KlarnaSizingDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var isScrollEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentOffset: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public var contentInsetAdjustmentBehavior: UIKit.UIScrollView.ContentInsetAdjustmentBehavior {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var keyboardDismissMode: UIKit.UIScrollView.KeyboardDismissMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var parentScrollView: UIKit.UIScrollView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public var adjustsParentScrollViewInsets: Swift.Bool {
    @objc get
    @objc set
  }
}
@objc public protocol KlarnaPaymentEventListener {
  @objc func klarnaInitialized(paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  @objc func klarnaLoaded(paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  @objc func klarnaLoadedPaymentReview(paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  @objc func klarnaAuthorized(paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool, authToken: Swift.String?, finalizeRequired: Swift.Bool)
  @objc func klarnaReauthorized(paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool, authToken: Swift.String?)
  @objc func klarnaFinalized(paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool, authToken: Swift.String?)
  @objc func klarnaResized(paymentView: KlarnaMobileSDK.KlarnaPaymentView, to newHeight: CoreFoundation.CGFloat)
  @objc func klarnaFailed(inPaymentView paymentView: KlarnaMobileSDK.KlarnaPaymentView, withError error: KlarnaMobileSDK.KlarnaPaymentError)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KlarnaExpressButtonDebug : KlarnaMobileSDK.KlarnaExpressButton {
  @_Concurrency.MainActor(unsafe) public func fullscreenPresentation(force: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setExpressButtonVersion(_ version: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func setExpressButtonEndpoint(_ url: Swift.String?)
  @_Concurrency.MainActor(unsafe) override public init(clientId: Swift.String, locale: Swift.String, buttonTheme: KlarnaMobileSDK.KlarnaButtonTheme = super, buttonShape: KlarnaMobileSDK.KlarnaButtonShape = super, buttonLabel: KlarnaMobileSDK.KlarnaButtonLabel = super, theme: KlarnaMobileSDK.KlarnaTheme = super, environment: KlarnaMobileSDK.KlarnaEnvironment = super, region: KlarnaMobileSDK.KlarnaRegion = super, resourceEndpoint: KlarnaMobileSDK.KlarnaResourceEndpoint = super, returnUrl: Foundation.URL, eventHandler: any KlarnaMobileSDK.KlarnaEventHandler)
  @objc deinit
}
@available(*, deprecated, message: "Not used as a type anymore.")
@objc public protocol KlarnaWebView {
}
@available(*, deprecated)
@objc extension WebKit.WKWebView : KlarnaMobileSDK.KlarnaWebView {
}
@objc public enum KlarnaButtonTheme : Swift.Int {
  @available(*, deprecated, message: "Klarna theme is no longer supported. Using this value will render the button in the default theme.")
  case klarna
  case light
  case dark
  case auto
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, renamed: "KlarnaError", message: "Use KlarnaError instead.")
public typealias KlarnaMobileSDKError = KlarnaMobileSDK.KlarnaError
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KlarnaPaymentView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @objc deinit
}
@objc public protocol KlarnaEventHandler {
  @objc func klarnaComponent(_ klarnaComponent: any KlarnaMobileSDK.KlarnaComponent, dispatchedEvent event: KlarnaMobileSDK.KlarnaProductEvent)
  @objc func klarnaComponent(_ klarnaComponent: any KlarnaMobileSDK.KlarnaComponent, encounteredError error: KlarnaMobileSDK.KlarnaError)
}
@objc public enum KlarnaButtonLabel : Swift.Int {
  case klarnaProduct
  case klarna
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KlarnaHybridSDKDebug : KlarnaMobileSDK.KlarnaHybridSDK {
  public func clearWebViewCookies()
  public func clearWebViewCache()
  public func evaluateJS(_ script: Swift.String)
  public func addCookie(name: Swift.String, value: Swift.String)
  @nonobjc public func registerTestAppDelegate(_ delegate: @escaping (KlarnaMobileSDK.KlarnaDebugEvent) -> Swift.Void)
  @objc deinit
}
@objc public enum KlarnaSignInButtonLogoAlignment : Swift.Int {
  case left
  case center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol KlarnaSignInTokenizationDelegate {
  @objc func onTokenization(_ klarnaComponent: any KlarnaMobileSDK.KlarnaComponent, completionHandler: @escaping (Swift.String) -> Swift.Void)
}
public struct KlarnaConfiguration : Swift.Equatable, Swift.Hashable {
  public let accountId: Swift.String?
  public let clientId: Swift.String
  public let locale: Swift.String?
  public class Builder {
    public init(clientId: Swift.String)
    @discardableResult
    public func setAccountId(_ accountId: Swift.String) -> Self
    @discardableResult
    public func setLocale(_ locale: Swift.String) -> Self
    public func build() -> KlarnaMobileSDK.KlarnaConfiguration
    @objc deinit
  }
  public static func == (lhs: KlarnaMobileSDK.KlarnaConfiguration, rhs: KlarnaMobileSDK.KlarnaConfiguration) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension KlarnaMobileSDK.KlarnaConfiguration : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension KlarnaMobileSDK.KlarnaButtonStyle : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaButtonStyle : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaButtonStyle : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaShippingCollection : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaShippingCollection : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaShippingCollection : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaButtonShape : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaButtonShape : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaButtonShape : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaPaymentButtonLabel : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaPaymentButtonLabel : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaPaymentButtonLabel : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaLoggingLevel : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaLoggingLevel : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaLoggingLevel : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaPostPurchaseRenderResult : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaPostPurchaseRenderResult : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaPostPurchaseRenderResult : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaCustomerProfileCollection : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaCustomerProfileCollection : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaCustomerProfileCollection : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaDebugEventType : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaDebugEventType : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaDebugEventType : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaShippingType : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaShippingType : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaShippingType : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaPaymentRequestStateReason : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaPaymentRequestStateReason : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaPaymentRequestStateReason : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaTheme : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaTheme : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaTheme : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaPaymentButtonState : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaPaymentButtonState : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaPaymentButtonState : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaPaymentRequestState : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaPaymentRequestState : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaPaymentRequestState : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaWebViewOpeningBehavior : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaWebViewOpeningBehavior : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaWebViewOpeningBehavior : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaShippingTypeAttributes : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaShippingTypeAttributes : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaShippingTypeAttributes : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaButtonTheme : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaButtonTheme : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaButtonTheme : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaButtonLabel : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaButtonLabel : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaButtonLabel : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaSignInButtonLogoAlignment : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaSignInButtonLogoAlignment : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaSignInButtonLogoAlignment : Swift.RawRepresentable {}
